name: Reply with search results

on:
  issues:
    types: [opened]

jobs:
  auto-reply-and-search:
    runs-on: ubuntu-latest
    steps:
      - name: Reply with greeting message
        uses: actions/github-script@v4
        with:
          script: |
            const greeting = `Hello @${context.payload.issue.user.login},\n\nThank you for submitting an issue. We appreciate your interest in our project! \n\nI will now try to find an answer to your question.`
            return github.issues.createComment({
              issue_number: context.payload.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: greeting
            })
          github-token: ${{ secrets.GOOGLE_TOKEN }}
          
      # - name: Get search results
      #   uses: actions/http-request@v1
      #   with:
      #     url: 'https://api.serpstack.com/search'
      #     method: 'GET'
      #     querystring: |
      #       access_key: ${{ secrets.SERPSTACK_ACCESS_KEY }}
      #       query: ${{ github.event.issue.title }}
      #       num: 5
      #       output: json
      #   id: search-results
      #   continue-on-error: true

      - name: Get search results
        run: |
          query=$(echo "${{ github.event.issue.title }}" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip()))")
          echo "https://serpapi.com/search?q=${query}&num=5&engine=google"
          curl -s "https://serpapi.com/search?q=${query}&num=5&engine=google&api_key=${{ secrets.SERPSTACK_ACCESS_KEY }}" > search_results.json
        id: search-results

      - name: Reply with search results
        run: |
          SEARCH_RESULTS=$(cat search_results.json)
          echo "$SEARCH_RESULTS"
          RESULTS_COUNT=$(echo "$SEARCH_RESULTS" | jq '.organic_results | length')
          REPLY="Here are the top ${RESULTS_COUNT} results from Google:\n"
          for ((i=0; i<$RESULTS_COUNT; i++)); do
            TITLE=$(echo "$SEARCH_RESULTS" | jq -r ".organic_results[$i].title")
            URL=$(echo "$SEARCH_RESULTS" | jq -r ".organic_results[$i].link")
            REPLY="${REPLY}â€¢ [${TITLE}](${URL})\n"
          done
          REPLY=$(echo "$REPLY" | sed 's/"/\\"/g')
          echo $REPLY
          curl -s -H "Authorization: token ${{ secrets.GOOGLE_TOKEN }}" -X POST -d "{\"body\": \"$REPLY\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

        if: ${{ success() }}

      # - name: Reply with google url
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       const query = context.payload.issue.title
      #       const url = `https://www.google.com/search?q=${encodeURIComponent(query)}`
      #       const reply = `I found some information that may be helpful. You can check it out here: ${url}`
      #       return github.issues.createComment({
      #         issue_number: context.payload.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: reply
      #       })
      #     github-token: ${{ secrets.GOOGLE_TOKEN }}
            
      - name: Get chat response
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.openai.com/v1/chat/completions'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.OPENAI_API_KEY }}", "Content-Type": "application/json"}'
          timeout: 20000
          data: |
            {
              "model": "gpt-3.5-turbo",
              "messages": [{"role": "user", "content": "${{ github.event.issue.title }}"}],
              "temperature": 0.7,
              "max_tokens": 100,
              "top_p": 1,
              "frequency_penalty": 0,
              "presence_penalty": 0
            }
        id: chat-response

      - name: Reply with chat response
        uses: actions/github-script@v4
        with:
          script: |
            const chatResponse = ${{ steps.chat-response.outputs.response }};
            console.log("got chatResponse:");
            console.log(chatResponse);
            const messageContent = chatResponse.choices[0].message.content;
            console.log(messageContent);
            return github.issues.createComment({
              issue_number: context.payload.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: messageContent
            })
          github-token: ${{ secrets.GOOGLE_TOKEN }}
          
        if: ${{ success() }}